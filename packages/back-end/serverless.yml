service: lockcept-world

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager

frameworkVersion: "2"

custom:
  customDomain:
    domainName: "api.lockcept.kr"
    basePath: ${self:provider.stage}
    stage: ${self:provider.stage}
    createRoute53Record: true
  serverless-offline:
    useChildProcesses: true
    httpPort: 4000
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
  tables:
    lockcept-table: ${self:service}-lockcept-table-${self:provider.stage}
    user-table: ${self:service}-user-table-${self:provider.stage}
    unique-email-table: ${self:service}-unique-email-table-${self:provider.stage}
    unique-alias-table: ${self:service}-unique-alias-table-${self:provider.stage}
    account-table: ${self:service}-account-table-${self:provider.stage}

provider:
  name: aws
  stage: ${ opt:stage, "dev" }
  region: ap-northeast-2
  runtime: nodejs12.x
  environment:
    STAGE: ${self:provider.stage}
    LOCKCEPT_TABLE: ${self:custom.tables.lockcept-table
    USER_TABLE: ${self:custom.tables.user-table}
    UNIQUE_EMAIL_TABLE: ${self:custom.tables.unique-email-table}}
    UNIQUE_ALIAS_TABLE: ${self:custom.tables.unique-alias-table}}
    ACCOUNT_TABLE: ${self:custom.tables.account-table}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

functions:
  postLockcept:
    handler: src/handler/lockcept.post
    events:
      - http:
          path: /lockcept/{email}
          method: get
          cors: true
  getLockcept:
    handler: src/handler/lockcept.get
    events:
      - http:
          path: /lockcept
          method: get
          cors: true
  createUser:
    handler: src/handler/user.create
    events:
      - http:
          path: /users
          method: post
          cors: true
  checkUser:
    handler: src/handler/user.check
    events:
      - http:
          path: /users/{userId}/check
          method: get
          cors: true
  signinUser:
    handler: src/handler/user.signin
    events:
      - http:
          path: /users/{userId}/signin
          method: post
          cors: true
  updateEmail:
    handler: src/handler/user.updateEmail
    events:
      - http:
          path: /users/{userId}/updateEmail
          method: patch
          cors: true

resources:
  Resources:
    lockceptTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tables.lockcept-table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tables.user-table}
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UniqueEmailTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tables.unique-email-table}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: UuidIndex
            KeySchema:
              - AttributeName: uuid
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
    UniqueAliasTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tables.unique-alias-table}
        AttributeDefinitions:
          - AttributeName: alias
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: alias
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: UuidIndex
            KeySchema:
              - AttributeName: uuid
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
    accountTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tables.account-table}
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
